name: CI/CD pipe
on:
  push:
  workflow_dispatch: # Allows you to run this workflow manually from the Actions tab
  schedule:
    - cron: 0 0 */7 * *  # run once a week

env:
  IMAGE_NAME: rouhim/althttpd
  IMAGE_TAG: latest

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        container-image-arch: [ amd64, arm64, arm ]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
        with:
          platforms: ${{ matrix.container-image-arch }}

      - name: Build container image
        uses: redhat-actions/buildah-build@v2
        with:
          image: ${{ env.IMAGE_NAME }}
          tags: ${{ env.IMAGE_TAG }}_${{ matrix.container-image-arch }}
          archs: ${{ matrix.container-image-arch }}
          containerfiles: |
            ./Containerfile

      - name: Save container image
        run: podman save -o ${{ matrix.container-image-arch }}.tar ${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}_${{ matrix.container-image-arch }}

      - name: Upload container image
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.container-image-arch }}
          path: ${{ matrix.container-image-arch }}.tar

  publish:
    runs-on: ubuntu-latest
    needs: build
    steps:

      - name: Checkout code
        uses: actions/checkout@v3

      - name: Download amd64 Container Image
        uses: actions/download-artifact@v3
        with:
          name: amd64
          path: .
      - name: Download arm64 Container Image
        uses: actions/download-artifact@v3
        with:
          name: arm64
          path: .
      - name: Download arm Container Image
        uses: actions/download-artifact@v3
        with:
          name: arm
          path: .

      - name: Restore container images
        run: | 
          podman load --input amd64.tar
          podman load --input arm64.tar
          podman load --input arm.tar

      - name: Create container image manifest
        run: buildah manifest create multiarch-manifest

      - name: Add all architechtures to the manifest
        run: | 
          buildah manifest add multiarch-manifest ${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}_amd64
          buildah manifest add multiarch-manifest ${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}_arm64
          buildah manifest add multiarch-manifest ${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}_arm

      - name: Login to docker hub
        run: podman login docker.io --username ${{ secrets.DOCKERHUB_USERNAME }} --password ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Push multiarch manifest to docker hub
        run: buildah manifest push --all multiarch-manifest docker://docker.io/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}

      - name: Update docker hub description
        if: github.ref_name == 'main' # only update description if the branch is main
        uses: peter-evans/dockerhub-description@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}
          repository: ${{ env.IMAGE_NAME }}
